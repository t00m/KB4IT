#!/usr/bin/python
# -*- coding: utf-8 -*-
"""
Builder service.

# File: srv_builder.py
# Author: Tomás Vírseda
# License: GPL v3
# Description: Create KB4IT pages
"""

import os
import sys
import math
import shutil

from datetime import datetime
try:
    import html5lib
    import webencodings
    from bs4 import BeautifulSoup as bs
    TIDY = True
except:
    TIDY = False
from kb4it.core.env import APP, GPATH
from kb4it.core.service import Service
from kb4it.core.util import valid_filename
from kb4it.core.util import get_human_datetime, fuzzy_date_from_timestamp
from kb4it.core.util import set_max_frequency, get_font_size
from kb4it.core.util import delete_files
from kb4it.core.util import get_hash_from_file, load_kbdict
from kb4it.core.util import get_asciidoctor_attributes

from mako.template import Template


TEMPLATES = {}


class Builder(Service):
    """Build HTML blocks"""

    tmpdir = None
    srvdtb = None
    backend = None
    temp_sources = []
    distributed = None

    def initialize(self):
        """Initialize Builder class."""
        self.get_services()
        self.tmpdir = self.srvbes.get_temp_path()
        self.srcdir = self.srvbes.get_source_path()
        self.now = datetime.now()
        self.distributed = {}

    def get_distributed(self):
        """Get a list of pages distributed"""
        return self.distributed

    def finalize(self):
        """Clean up temporary files"""
        # Delete temporary sources generated by themes
        delete_files(self.temp_sources)

    def get_services(self):
        """Get services."""
        self.srvdtb = self.get_service('DB')
        self.srvbes = self.get_service('Backend')

    def distribute(self, name, content):
        """
        Distribute source file to temporary directory.

        Use this method when the source asciidoctor file doesn't have to
        be analyzed.
        """
        PAGE_NAME = "%s.adoc" % name
        PAGE_PATH = os.path.join(self.tmpdir, PAGE_NAME)
        with open(PAGE_PATH, 'w') as fpag:
            try:
                fpag.write(content)
            except Exception as error:
                self.log.error("[DISTRIBUTE] - %s", error)
        self.distributed[PAGE_NAME] = get_hash_from_file(PAGE_PATH)
        self.srvbes.add_target(PAGE_NAME.replace('.adoc', '.html'))
        self.log.debug("[DISTRIBUTE] - Page[%s] distributed to temporary path", os.path.basename(PAGE_PATH))

    def distribute_html(self, name, content):
        """
        Distribute html file to the temporary directory.
        """
        PAGE_NAME = "%s.html" % name
        PAGE_PATH = os.path.join(self.tmpdir, PAGE_NAME)
        with open(PAGE_PATH, 'w') as fpag:
            try:
                fpag.write(content)
            except Exception as error:
                self.log.error("[DISTRIBUTE] - %s", error)
        self.distributed[PAGE_NAME] = get_hash_from_file(PAGE_PATH)
        self.srvbes.add_target(PAGE_NAME)
        self.log.debug("[DISTRIBUTE] - Page[%s] distributed to temporary path", os.path.basename(PAGE_PATH))

    def distribute_to_source(self, name, content):
        """
        Distribute source file to user source directory.
        Use this method when the source asciidoctor file has to
        be analyzed to extract its properties.
        File path reference will be saved and deleted at the end of the
        execution.
        """
        PAGE_NAME = "%s.adoc" % name
        PAGE_PATH = os.path.join(self.srcdir, PAGE_NAME)
        self.temp_sources.append(PAGE_PATH)
        try:
            with open(PAGE_PATH, 'w') as fpag:
                fpag.write(content)
                self.log.debug("[BUILDER] - PAGE[%s] distributed to source path", name)
        except OSError as error:
            self.log.error(error)

    def template(self, template):
        """Return the template content from default theme or user theme"""

        properties = self.srvbes.get_runtime()
        theme = properties['theme']
        current_theme = theme['id']

        # Try to get the template from cache
        try:
            tpl = TEMPLATES[template]
            # ~ self.log.debug("[TEMPLATES] - Template[%s] loaded from cache", template)
            return tpl
        except KeyError:
            try:
                # Get template from theme
                template_path = os.path.join(theme['templates'], "%s.tpl" % template)
                TEMPLATES[template] = Template(filename=template_path)
                self.log.debug("[TEMPLATES] - Template[%s] loaded for Theme[%s] and added to the cache", template, theme['id'])
            except FileNotFoundError as error:
                try:
                    # Try with global templates
                    template_path = os.path.join(GPATH['TEMPLATES'], "%s.tpl" % template)
                    TEMPLATES[template] = Template(filename=template_path)
                    self.log.debug("[TEMPLATES] - Global Template[%s] loaded and added to the cache", template)
                except FileNotFoundError as error:
                    TEMPLATES[template] = Template("")
                    self.log.warning("[TEMPLATES] - Template[%s] not found. Returning empty template!", template)
                
            return TEMPLATES[template]

    def render_template(self, name):
        tpl = self.template(name)
        return tpl.render()

    def get_mako_var(self):
        var = {}
        var['theme'] = self.srvbes.get_theme_properties()
        # ~ self.log.debug(var['theme'])
        return var

    def page_hook_pre(self, basename):
        """ Insert html code before the content.
        This method can be overwriten by custom themes.
        """
        return """<!-- Page hook pre -->"""

    def page_hook_post(self, var):
        """ Insert html code after the content.
        This method can be overwriten by custom themes.
        """
        return """<!-- Page hook post -->"""

    def extract_toc(self, source):
        """Extract TOC from Asciidoctor generated HTML code and
        make it theme dependent."""
        toc = ''
        items = []
        lines = source.split('\n')
        s = e = n = 0
        var = self.get_mako_var()
        TOC_LI_TOP = self.template('HTML_TOC_LI')
        TOC_SECTLEVEL1 = self.template('HTML_TOC_SECTLEVEL1')
        TOC_SECTLEVEL2 = self.template('HTML_TOC_SECTLEVEL2')
        TOC_SECTLEVEL3 = self.template('HTML_TOC_SECTLEVEL3')
        TOC_SECTLEVEL4 = self.template('HTML_TOC_SECTLEVEL4')

        for line in lines:
            if line.find("toctitle") > 0:
                s = n + 1
            if s > 0:
                if line.startswith('</div>') and n > s:
                    e = n
                    break
            n = n + 1

        if s > 0 and e > s:
            for line in lines[s:e]:
                if line.startswith('<li><a href='):
                    line = line.replace("<li><a ", TOC_LI_TOP.render(var=var))
                else:
                    line = line.replace("sectlevel1", TOC_SECTLEVEL1.render(var=var))
                    line = line.replace("sectlevel2", TOC_SECTLEVEL2.render(var=var))
                    line = line.replace("sectlevel3", TOC_SECTLEVEL3.render(var=var))
                    line = line.replace("sectlevel4", TOC_SECTLEVEL4.render(var=var))
                items.append(line)
            toc = '\n'.join(items)
        return toc

    def create_page_key(self, key, values):
        """Create page for a key."""
        TPL_PAGE_KEY = self.template('PAGE_KEY_KB4IT')
        var = {}

        # Title
        var['title'] = key
        var['key_values'] = {}
        for value in values:
            k_value = "%s_%s" % (valid_filename(key), valid_filename(value))
            var['key_values'][k_value] = {}
            docs = self.srvdtb.get_docs_by_key_value(key, value)
            var['key_values'][k_value]['count'] = len(docs)
            var['key_values'][k_value]['vfkey'] = valid_filename(key)
            var['key_values'][k_value]['vfvalue'] = valid_filename(value)
            var['key_values'][k_value]['name'] = value
        html = TPL_PAGE_KEY.render(var=var)
        self.log.debug("PageKey[%s]:\n%s", key, html)
        return html
    
    def transform(self, content, var):
        """Transform output document HTML source code.
        This method can be overwriten by custom themes.
        """
        self.log.debug("[BUILD] - Page[%s] - No transformation invoked", var['basename_html'])
        return content, var
        
    def build_page(self, adoc):
        """
        Build the final HTML Page

        At this point, the Builder receives an HTML page but without
        header/footer. Then, it finishes the page.
        """
        basename_adoc = os.path.basename(adoc)
        htmldoc = adoc.replace('.adoc', '.html')
        basename_html = basename_adoc.replace('.adoc', '.html')
        
        if not os.path.exists(htmldoc):
            self.log.error("[BUILD] - Source[%s] not converted to HTML properly", basename_adoc)
        else:
            self.log.debug("[BUILD] - Page[%s] transformation started", basename_html)
            THEME_ID = self.srvbes.get_theme_property('id')
            HTML_HEADER_COMMON = self.template('HTML_HEADER_COMMON')
            HTML_HEADER_DOC = self.template('HTML_HEADER_DOC')
            HTML_HEADER_NODOC = self.template('HTML_HEADER_NODOC')
            HTML_FOOTER = self.template('HTML_FOOTER')
            now = datetime.now()
            timestamp = get_human_datetime(now)            
            keys = get_asciidoctor_attributes(adoc)        
            var = self.get_mako_var()
            var['keys'] = keys
            var['title'] = ', '.join(keys['Title'])
            var['menu_contents'] = ""
            var['basename'] = basename_adoc
            var['basename_html'] = basename_html
            var['meta_section'] = ""
            var['source_code'] = ""
            var['timestamp'] = timestamp
            
            HTML = ""
            content = open(htmldoc, 'r').read()
            BODY, var = self.transform(content, var)
            HEADER = HTML_HEADER_COMMON.render(var=var)
            FOOTER = HTML_FOOTER.render(var=var)
            
            HTML += HEADER
            HTML += BODY
            HTML += FOOTER
            
            with open(htmldoc, 'w') as fhtml:
                fhtml.write(HTML)
            self.log.debug("[BUILD] - Page[%s] transformation finished", basename_html)
        return 

            



        cur_thread = threading.current_thread().name
        if cur_thread != x:
            adoc, rc, j = x
            self.log.debug("[BUILD] - Received[%s]", adoc)
            # Add header and footer to compiled doc
            htmldoc = adoc.replace('.adoc', '.html')
            basename = os.path.basename(adoc)
            if os.path.exists(htmldoc):
                var = self.get_mako_var()
                var['page'] = {}
                try:
                    adoc_title = open(adoc).readlines()[0]
                except Exception as error:
                    self.log.error("[BUILD] - %s => %s", adoc, error)
                    return x

                title = adoc_title[2:-1]
                var['page']['title'] = title
                var['page']['source_adoc'] = adoc
                var['page']['source_html'] = htmldoc
                htmldoctmp = "%s.tmp" % htmldoc
                shutil.move(htmldoc, htmldoctmp)
                source = open(htmldoctmp, 'r').read()
                toc = self.extract_toc(source)
                content = self.apply_transformations(source)
                try:
                    if 'Metadata' in content:
                        content = self.highlight_metadata_section(content)
                except NameError as error:
                    # FIXME
                    # Sometimes, weird links in asciidoctor sources
                    # provoke compilation errors
                    self.log.error("[BUILDER] - ERROR!! Please, check source document '%s'.", basename)
                    self.log.error("[BUILDER] - ERROR!! It didn't compile successfully. Usually, it is because of malformed urls.")
                finally:
                    # Some pages don't have toc section. Ignore it.
                    pass

                with open(htmldoc, 'w') as fhtm:
                    len_toc = len(toc)
                    if len_toc > 0:
                        var['page']['toc'] = toc
                        var['page']['is_document'] = True
                        var['content'] = toc
                        properties = self.srvdtb.get_doc_properties(basename)
                        var['page']['properties'] = properties
                        TPL_HTML_HEADER_MENU_CONTENTS_ENABLED = self.template('HTML_HEADER_MENU_CONTENTS_ENABLED')
                        HTML_TOC = TPL_HTML_HEADER_MENU_CONTENTS_ENABLED.render(var=var)
                    else:
                        var['page']['toc'] = ''
                        var['page']['is_document'] = False
                        var['page']['properties'] = {}
                        TPL_HTML_HEADER_MENU_CONTENTS_DISABLED = self.template('HTML_HEADER_MENU_CONTENTS_DISABLED')
                        HTML_TOC = TPL_HTML_HEADER_MENU_CONTENTS_DISABLED.render()

                    userdoc = os.path.join(os.path.join(self.srvbes.get_source_path(), basename))

                    var['title'] = title
                    var['menu_contents'] = HTML_TOC
                    var['basename'] = basename
                    var['timestamp'] = timestamp

                    HTML_SRC = "" # HTML Source Code
                    # Write page header
                    if os.path.exists(userdoc):
                        source_code = open(userdoc, 'r').read()
                        var['source_code'] = source_code
                        self.srvthm = self.get_service('Theme')
                        meta_section = self.srvthm.create_metadata_section(basename)
                        var['meta_section'] = meta_section
                        HEADER = HTML_HEADER_COMMON.render(var=var) + HTML_HEADER_DOC.render(var=var)
                        # ~ fhtm.write(PAGE)
                    else:
                        HEADER = HTML_HEADER_COMMON.render(var=var) + HTML_HEADER_NODOC.render(var=var)
                        # ~ fhtm.write(PAGE)
                    HTML_SRC += HEADER

                    # Insert pre & post hooks content
                    BODY = self.page_hook_pre(var) + content
                    BODY = BODY + self.page_hook_post(var)
                    HTML_SRC += BODY

                    # Write content
                    # ~ fhtm.write(content)

                    # Write page footer
                    FOOTER = HTML_FOOTER.render(var=var)
                    HTML_SRC += FOOTER

                    # Prettify code?
                    if TIDY:
                        soup = bs(HTML_SRC, 'html5lib')
                        HTML_SRC = soup.prettify(formatter='html5')

                    # Write page
                    fhtm.write(HTML_SRC)
                    self.log.debug("[BUILDER] - Document[%s] created successfully", basename)

                os.remove(htmldoctmp)
                return x

    def generate_sources(self):
        """Custom themes can use this method to generate source documents"""
        pass

    def generate_pages(self):
        """Custom themes can use this method to generate final pages"""
        pass
